# Generated by ariadne-codegen on 2024-09-12 16:54
# Source: queries.graphql

from datetime import datetime
from typing import Any
from typing import List
from typing import Optional
from typing import Union
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .base_model import UNSET
from .base_model import UnsetType
from .get_engagements import GetEngagements
from .get_engagements import GetEngagementsEngagements
from .get_organization import GetOrganization
from .get_organization import GetOrganizationOrg
from .update_engagement import UpdateEngagement
from .update_engagement import UpdateEngagementEngagementUpdate


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def get_organization(self) -> GetOrganizationOrg:
        query = gql(
            """
            query GetOrganization {
              org {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetOrganization.parse_obj(data).org

    async def get_engagements(
        self,
        from_date: Union[Optional[datetime], UnsetType] = UNSET,
        to_date: Union[Optional[datetime], UnsetType] = UNSET,
        cpr: Union[Optional[List[Any]], UnsetType] = UNSET,
        eng_user_key: Union[Optional[List[str]], UnsetType] = UNSET,
    ) -> GetEngagementsEngagements:
        query = gql(
            """
            query GetEngagements($from_date: DateTime, $to_date: DateTime, $cpr: [CPR!], $eng_user_key: [String!]) {
              engagements(
                filter: {from_date: $from_date, to_date: $to_date, user_keys: $eng_user_key, employee: {cpr_numbers: $cpr}}
              ) {
                objects {
                  validities {
                    person {
                      cpr_number
                      uuid
                    }
                    org_unit {
                      uuid
                      user_key
                      name
                    }
                    validity {
                      from
                      to
                    }
                    user_key
                    job_function {
                      user_key
                      name
                      uuid
                    }
                    engagement_type {
                      name
                      user_key
                      uuid
                    }
                  }
                  uuid
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "from_date": from_date,
            "to_date": to_date,
            "cpr": cpr,
            "eng_user_key": eng_user_key,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetEngagements.parse_obj(data).engagements

    async def update_engagement(
        self,
        uuid: UUID,
        from_: datetime,
        job_function: UUID,
        to: Union[Optional[datetime], UnsetType] = UNSET,
    ) -> UpdateEngagementEngagementUpdate:
        query = gql(
            """
            mutation UpdateEngagement($uuid: UUID!, $from: DateTime!, $to: DateTime, $job_function: UUID!) {
              engagement_update(
                input: {uuid: $uuid, validity: {from: $from, to: $to}, job_function: $job_function}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "uuid": uuid,
            "from": from_,
            "to": to,
            "job_function": job_function,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UpdateEngagement.parse_obj(data).engagement_update
