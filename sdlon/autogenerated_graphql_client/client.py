# Generated by ariadne-codegen on 2024-09-04 09:16
# Source: queries.graphql

from datetime import datetime
from typing import Optional
from typing import Union
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .base_model import UNSET
from .base_model import UnsetType
from .get_organization import GetOrganization
from .get_organization import GetOrganizationOrg
from .update_engagement import UpdateEngagement
from .update_engagement import UpdateEngagementEngagementUpdate


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def get_organization(self) -> GetOrganizationOrg:
        query = gql(
            """
            query GetOrganization {
              org {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetOrganization.parse_obj(data).org

    async def update_engagement(
        self,
        uuid: UUID,
        from_: datetime,
        job_function: UUID,
        to: Union[Optional[datetime], UnsetType] = UNSET,
    ) -> UpdateEngagementEngagementUpdate:
        query = gql(
            """
            mutation UpdateEngagement($uuid: UUID!, $from: DateTime!, $to: DateTime, $job_function: UUID!) {
              engagement_update(
                input: {uuid: $uuid, validity: {from: $from, to: $to}, job_function: $job_function}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "uuid": uuid,
            "from": from_,
            "to": to,
            "job_function": job_function,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UpdateEngagement.parse_obj(data).engagement_update
